[{"C:\\Projects\\cinema-app\\client\\src\\components\\SignIn.jsx":"1","C:\\Projects\\cinema-app\\client\\src\\components\\BookingPage.jsx":"2","C:\\Projects\\cinema-app\\client\\src\\components\\Movies.jsx":"3","C:\\Projects\\cinema-app\\client\\src\\components\\index.js":"4","C:\\Projects\\cinema-app\\client\\src\\index.js":"5","C:\\Projects\\cinema-app\\client\\src\\components\\MyTickets.jsx":"6","C:\\Projects\\cinema-app\\client\\src\\components\\SignUp.jsx":"7","C:\\Projects\\cinema-app\\client\\src\\components\\Dashboard.jsx":"8","C:\\Projects\\cinema-app\\client\\src\\components\\Footer.jsx":"9","C:\\Projects\\cinema-app\\client\\src\\components\\Header.jsx":"10","C:\\Projects\\cinema-app\\client\\src\\components\\BookingSeats.jsx":"11","C:\\Projects\\cinema-app\\client\\src\\components\\Movie.jsx":"12","C:\\Projects\\cinema-app\\client\\src\\App.js":"13","C:\\Projects\\cinema-app\\client\\src\\utils\\utils.js":"14"},{"size":4243,"mtime":1610098589223,"results":"15","hashOfConfig":"16"},{"size":11942,"mtime":1610098589219,"results":"17","hashOfConfig":"16"},{"size":2792,"mtime":1610098589221,"results":"18","hashOfConfig":"16"},{"size":3090,"mtime":1610098669505,"results":"19","hashOfConfig":"16"},{"size":207,"mtime":1608048985112,"results":"20","hashOfConfig":"16"},{"size":4729,"mtime":1626422288363,"results":"21","hashOfConfig":"16"},{"size":4306,"mtime":1610098589225,"results":"22","hashOfConfig":"16"},{"size":1363,"mtime":1610098638976,"results":"23","hashOfConfig":"16"},{"size":1561,"mtime":1610098629297,"results":"24","hashOfConfig":"16"},{"size":2601,"mtime":1608048985104,"results":"25","hashOfConfig":"16"},{"size":3959,"mtime":1609424051973,"results":"26","hashOfConfig":"16"},{"size":4236,"mtime":1610098649835,"results":"27","hashOfConfig":"16"},{"size":3629,"mtime":1610098470012,"results":"28","hashOfConfig":"16"},{"size":559,"mtime":1608048985115,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"x6325x",{"filePath":"34","messages":"35","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"33"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projects\\cinema-app\\client\\src\\components\\SignIn.jsx",["66"],"import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n  Typography,\r\n  Container,\r\n  CssBaseline,\r\n  Avatar,\r\n  Button,\r\n  LockOutlinedIcon,\r\n  TextField,\r\n  Link,\r\n  Grid,\r\n  Footer,\r\n} from '.';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    margin: theme.spacing(8, 0, 2, 0),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.grey.main,\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function SignIn({ setAuth }) {\r\n  const classes = useStyles();\r\n\r\n  const [inputs, setInputs] = useState({\r\n    email: '',\r\n    password: '',\r\n  });\r\n  const { email, password } = inputs;\r\n\r\n  const onChange = (e) => {\r\n    setInputs({ ...inputs, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const onSubmitForm = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const body = { email, password };\r\n\r\n      const response = await fetch('http://localhost:5000/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(body),\r\n      });\r\n\r\n      const parseRes = await response.json();\r\n\r\n      if (parseRes.token) {\r\n        localStorage.setItem('token', parseRes.token);\r\n\r\n        setAuth(true);\r\n        toast.success('Добро пожаловать!', {\r\n          position: 'bottom-right',\r\n          autoClose: 2800,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n      } else setAuth(false);\r\n      toast.info(parseRes, {\r\n        position: 'bottom-right',\r\n        autoClose: 2800,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Вход\r\n          </Typography>\r\n          <form className={classes.form} noValidate onSubmit={onSubmitForm}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  value={email}\r\n                  onChange={(e) => onChange(e)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  value={password}\r\n                  onChange={(e) => onChange(e)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                >\r\n                  Войти\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container justify=\"flex-end\">\r\n              <Grid item>\r\n                <Link href=\"/register\" variant=\"body2\" color=\"secondary\">\r\n                  Нет аккаунта? Регистрация\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n",["67","68","69","70","71"],"C:\\Projects\\cinema-app\\client\\src\\components\\BookingPage.jsx",["72","73","74","75","76","77","78","79"],"/* eslint-disable prefer-const */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport MomentUtils from '@date-io/moment';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  // MenuItem,\r\n  TextField,\r\n  Typography,\r\n  Button,\r\n  BookingSeats,\r\n} from '.';\r\n\r\nconst BookingPage = () => {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [userId, setUserId] = useState('');\r\n  const getEmail = async () => {\r\n    try {\r\n      const res = await fetch('http://localhost:5000/dashboard/', {\r\n        method: 'GET',\r\n        headers: { token: localStorage.token },\r\n      });\r\n\r\n      const parseData = await res.json();\r\n      setEmail(parseData.user_email);\r\n      setUserId(parseData.user_id);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const [movie, setMovie] = useState('');\r\n  const { id } = useParams();\r\n  const getMovie = async () => {\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/movies/${id}`, {\r\n        method: 'GET',\r\n        headers: { token: localStorage.token },\r\n      });\r\n\r\n      const parse = await res.json();\r\n      setMovie(parse[0]);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const [hallScheme, setHallScheme] = useState('');\r\n  const getHallSchemeData = async () => {\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/booking/${id}`, {\r\n        method: 'GET',\r\n        headers: { token: localStorage.token },\r\n      });\r\n\r\n      const parse = await res.json();\r\n      setHallScheme(parse[0]);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const [showtime, setShowtime] = useState('');\r\n  const getShowtime = async () => {\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/booking/showtimes/${id}`, {\r\n        method: 'GET',\r\n        headers: { token: localStorage.token },\r\n      });\r\n\r\n      const parse = await res.json();\r\n      setShowtime(parse[0]);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const [seats, setSeats] = useState('');\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [selectedSeats, setSelectedSeats] = useState('');\r\n  const [newSeats, setNewSeats] = useState('');\r\n  let bookedSeats = [];\r\n  const getSeats = async () => {\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/booking/${id}`, {\r\n        method: 'GET',\r\n        headers: { token: localStorage.token },\r\n      });\r\n\r\n      const parse = await res.json();\r\n      setSeats(parse[0].seats);\r\n      setNewSeats(parse[0].seats);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getEmail();\r\n    getMovie();\r\n    getHallSchemeData();\r\n    getShowtime();\r\n    getSeats();\r\n  }, []);\r\n\r\n  const updateHallScheme = async () => {\r\n    try {\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      for (let i = 0; i < newSeats.length; i += 1) {\r\n        // eslint-disable-next-line no-restricted-syntax\r\n        for (let j = 0; j < newSeats[i].length; j += 1) {\r\n          // eslint-disable-next-line eqeqeq\r\n          if (newSeats[i][j] === 2) {\r\n            newSeats[i][j] = 1;\r\n            bookedSeats.push([i, j]);\r\n          }\r\n        }\r\n      }\r\n      const body = { newSeats };\r\n      const myHeaders = new Headers();\r\n      myHeaders.append('Content-Type', 'application/json');\r\n      myHeaders.append('token', localStorage.token);\r\n\r\n      await fetch(\r\n        `http://localhost:5000/booking/hallschemes/${hallScheme.hallscheme_id}`,\r\n        {\r\n          method: 'PUT',\r\n          headers: myHeaders,\r\n          body: JSON.stringify(body),\r\n        }\r\n      );\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const [count, setCount] = useState(0);\r\n  const [total, setTotal] = useState(0);\r\n  function onSelectSeat(row, seat) {\r\n    let ttl = showtime.ticket_price * (count + 1);\r\n    if (newSeats !== undefined) {\r\n      if (seats[row][seat] === 1) {\r\n        newSeats[row][seat] = 1;\r\n      } else if (seats[row][seat] === 2) {\r\n        newSeats[row][seat] = 3;\r\n        setCount(count - 1);\r\n        setTotal(ttl);\r\n      } else if (seats[row][seat] === 3) {\r\n        newSeats[row][seat] = 2;\r\n        setCount(count + 1);\r\n        setTotal(ttl);\r\n      } else {\r\n        newSeats[row][seat] = 4;\r\n      }\r\n    }\r\n    setSelectedSeats([row, seat]);\r\n    setNewSeats(newSeats);\r\n  }\r\n\r\n  const createReservation = async () => {\r\n    try {\r\n      const myHeaders = new Headers();\r\n\r\n      myHeaders.append('Content-Type', 'application/json');\r\n      myHeaders.append('token', localStorage.token);\r\n      const shId = showtime.showtime_id;\r\n      const body = { shId, bookedSeats, selectedDate, total };\r\n\r\n      await fetch(`http://localhost:5000/reservations/${userId} `, {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: JSON.stringify(body),\r\n      });\r\n      toast.success('Билеты оформлены!', {\r\n        position: 'bottom-right',\r\n        autoClose: 1500,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  function delay(URL) {\r\n    setTimeout(function () {\r\n      window.location = URL;\r\n    }, 1900);\r\n  }\r\n\r\n  function onConfirmBook() {\r\n    updateHallScheme();\r\n    createReservation();\r\n    delay('/');\r\n  }\r\n  const useStyles = makeStyles((theme) => ({\r\n    blurBackground: {\r\n      backgroundImage: `linear-gradient(to right, rgba(0,0,0,.7) 10%, rgba(0,0,0,.7) 10%),url(${movie.back_image_url})`,\r\n      position: 'absolute',\r\n      top: 0,\r\n      zIndex: -1,\r\n      right: 0,\r\n      height: '100vh',\r\n      filter: 'blur(6px)',\r\n      backgroundPosition: 'center',\r\n      backgroundSize: 'cover',\r\n      backgroundRepeat: 'no-repeat',\r\n      width: '100%',\r\n    },\r\n    container: {\r\n      background: 'transparant',\r\n      transform: 'translate(0%, 0%)',\r\n    },\r\n    form: {\r\n      padding: theme.spacing(4, 0, 0, 0),\r\n    },\r\n    bannerTitle: {\r\n      fontSize: theme.spacing(1.4),\r\n      textTransform: 'uppercase',\r\n      color: 'rgb(93, 93, 97)',\r\n      marginBottom: theme.spacing(1),\r\n    },\r\n    bannerContent: {\r\n      fontSize: theme.spacing(2),\r\n\r\n      color: theme.palette.common.white,\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      hideOnSmall: {\r\n        display: 'none',\r\n      },\r\n    },\r\n    checkout: {\r\n      padding: theme.spacing(4, 0, 0, 0),\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Container className={classes.container} maxWidth=\"lg\">\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={12}>\r\n            <Grid className={classes.form} container spacing={3}>\r\n              <Grid item xs className={classes.hideOnSmall}>\r\n                <TextField\r\n                  fullWidth\r\n                  disabled\r\n                  value={`${hallScheme.hall_name} зал`}\r\n                  variant=\"outlined\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs>\r\n                <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                  <KeyboardDatePicker\r\n                    disableToolbar\r\n                    variant=\"inline\"\r\n                    inputVariant=\"outlined\"\r\n                    margin=\"none\"\r\n                    fullWidth\r\n                    id=\"start-date\"\r\n                    label=\"Дата сеанса\"\r\n                    minDate={new Date(showtime.start_date)}\r\n                    maxDate={new Date(showtime.end_date)}\r\n                    value={selectedDate}\r\n                    // eslint-disable-next-line no-underscore-dangle\r\n                    onChange={(date) => setSelectedDate(date._d)}\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n              <Grid item xs>\r\n                <TextField\r\n                  fullWidth\r\n                  disabled\r\n                  // select\r\n                  value={showtime.start_at}\r\n                  variant=\"outlined\"\r\n                >\r\n                  {/* {showtime.length > 0 &&\r\n                    showtime.split(',').map((time) => (\r\n                      // eslint-disable-next-line react/no-array-index-key\r\n                      <MenuItem key={`${time}`} value={time}>\r\n                        {time}\r\n                      </MenuItem>\r\n                    ))} */}\r\n                </TextField>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <BookingSeats\r\n              seats={seats}\r\n              onSelectSeat={(indexRow, index) => onSelectSeat(indexRow, index)}\r\n            />\r\n\r\n            <Grid container className={classes.checkout}>\r\n              <Grid item xs={4} md={8}>\r\n                <Grid container spacing={3} style={{ padding: 20 }}>\r\n                  <Grid item className={classes.hideOnSmall}>\r\n                    <Typography className={classes.bannerTitle}>\r\n                      Email\r\n                    </Typography>\r\n                    <Typography className={classes.bannerContent}>\r\n                      {email}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography className={classes.bannerTitle}>\r\n                      Цена билета\r\n                    </Typography>\r\n                    <Typography className={classes.bannerContent}>\r\n                      {showtime.ticket_price}\r\n                      {' \\u20BD'}\r\n                    </Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item className={classes.hideOnSmall}>\r\n                    <Typography className={classes.bannerTitle}>\r\n                      Билеты\r\n                    </Typography>\r\n                    {count > 0 ? (\r\n                      <Typography className={classes.bannerContent}>\r\n                        {count}\r\n                      </Typography>\r\n                    ) : (\r\n                      <Typography className={classes.bannerContent}>\r\n                        0\r\n                      </Typography>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography className={classes.bannerTitle}>\r\n                      Итого\r\n                    </Typography>\r\n                    <Typography className={classes.bannerContent}>\r\n                      {showtime.ticket_price * count}\r\n                      {' \\u20BD'}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                xs={4}\r\n                md={2}\r\n                style={{\r\n                  display: 'flex',\r\n                }}\r\n              >\r\n                <Button color=\"inherit\" fullWidth href={`/movies/${id}`}>\r\n                  Отменить\r\n                </Button>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                xs={4}\r\n                md={2}\r\n                style={{\r\n                  display: 'flex',\r\n                }}\r\n              >\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  fullWidth\r\n                  disabled={count === 0}\r\n                  onClick={() => onConfirmBook()}\r\n                >\r\n                  Подтвердить\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <div className={classes.blurBackground} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BookingPage;\r\n","C:\\Projects\\cinema-app\\client\\src\\components\\Movies.jsx",["80","81"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Carousel from 'react-material-ui-carousel';\r\nimport { textTruncate } from '../utils/utils';\r\nimport {\r\n  CssBaseline,\r\n  Card,\r\n  CardMedia,\r\n  CardActionArea,\r\n  CardContent,\r\n  Typography,\r\n  Link,\r\n} from '.';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    borderRadius: '15px !important',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '43%',\r\n    backgroundRepeat: 'no-repeat',\r\n    borderRadius: '15px !important',\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n    background: 'linear-gradient(to top, #000, rgba(0,0,0,0))',\r\n    borderRadius: '15px !important',\r\n  },\r\n  action: {\r\n    borderRadius: '15px !important',\r\n  },\r\n}));\r\n\r\nconst Movies = () => {\r\n  const [data, setData] = useState('');\r\n\r\n  const getData = async () => {\r\n    try {\r\n      const res = await fetch('http://localhost:5000/movies', {\r\n        method: 'GET',\r\n        headers: { token: localStorage.token },\r\n      });\r\n\r\n      const parseData = await res.json();\r\n      setData(parseData);\r\n      console.log(parseData);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <Typography\r\n        component=\"h3\"\r\n        variant=\"h3\"\r\n        align=\"center\"\r\n        color=\"textPrimary\"\r\n        gutterBottom\r\n      >\r\n        сейчас в прокате\r\n      </Typography>\r\n      <Carousel animation=\"fade\" interval={10500}>\r\n        {data.length !== 0 &&\r\n          data[0].movie_id !== null &&\r\n          data.map((movies) => (\r\n            <Link\r\n              href={`movies/${movies.movie_id}`}\r\n              style={{ textDecoration: 'none' }}\r\n            >\r\n              <Card className={classes.card}>\r\n                <CardActionArea className={classes.action}>\r\n                  <CardMedia\r\n                    className={classes.cardMedia}\r\n                    image={movies.image_url}\r\n                    title={movies.movie_title}\r\n                  >\r\n                    <CardContent className={classes.cardContent}>\r\n                      <Typography gutterBottom variant=\"h4\" component=\"h4\">\r\n                        {movies.movie_title}\r\n                      </Typography>\r\n                      <Typography>\r\n                        {textTruncate(movies.movie_description, 200)}\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </CardMedia>\r\n                </CardActionArea>\r\n              </Card>\r\n            </Link>\r\n          ))}\r\n      </Carousel>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n","C:\\Projects\\cinema-app\\client\\src\\components\\index.js",[],"C:\\Projects\\cinema-app\\client\\src\\index.js",[],"C:\\Projects\\cinema-app\\client\\src\\components\\MyTickets.jsx",["82","83"],"C:\\Projects\\cinema-app\\client\\src\\components\\SignUp.jsx",["84"],"import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n  Typography,\r\n  Container,\r\n  CssBaseline,\r\n  Avatar,\r\n  Button,\r\n  HowToRegIcon,\r\n  TextField,\r\n  Link,\r\n  Grid,\r\n  Footer,\r\n} from '.';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    margin: theme.spacing(8, 0, 2, 0),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.grey.main,\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function SignUp({ setAuth }) {\r\n  const classes = useStyles();\r\n  const [inputs, setInputs] = useState({\r\n    email: '',\r\n    password: '',\r\n  });\r\n  const { email, password } = inputs;\r\n\r\n  const onChange = (e) => {\r\n    setInputs({ ...inputs, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const onSubmitForm = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const body = { email, password };\r\n\r\n      const response = await fetch('http://localhost:5000/auth/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(body),\r\n      });\r\n\r\n      const parseRes = await response.json();\r\n      if (parseRes.token) {\r\n        localStorage.setItem('token', parseRes.token);\r\n        setAuth(true);\r\n        toast.success('Вы зарегистрировались!', {\r\n          position: 'bottom-right',\r\n          autoClose: 2800,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n      } else {\r\n        setAuth(false);\r\n        toast.error(parseRes, {\r\n          position: 'bottom-right',\r\n          autoClose: 2800,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <HowToRegIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Регистрация\r\n          </Typography>\r\n          <form className={classes.form} noValidate onSubmit={onSubmitForm}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  value={email}\r\n                  onChange={(e) => onChange(e)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  value={password}\r\n                  onChange={(e) => onChange(e)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                >\r\n                  Зарегистрироваться\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container justify=\"flex-end\">\r\n              <Grid item>\r\n                <Link href=\"/login\" variant=\"body2\" color=\"secondary\">\r\n                  Есть аккаунт? Войти\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n","C:\\Projects\\cinema-app\\client\\src\\components\\Dashboard.jsx",["85","86"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { CssBaseline, Movies, Container, Header, Footer } from '.';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  movies: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst Dashboard = ({ setAuth }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [userId, setUserId] = useState('');\r\n  const getEmail = async () => {\r\n    try {\r\n      const res = await fetch('http://localhost:5000/dashboard/', {\r\n        method: 'GET',\r\n        headers: { token: localStorage.token },\r\n      });\r\n\r\n      const parseData = await res.json();\r\n      setEmail(parseData.user_email);\r\n\r\n      setUserId(parseData.user_id);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const logout = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      localStorage.removeItem('token');\r\n      setAuth(false);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getEmail();\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <Header userId={userId} email={email} logout={logout} />\r\n      <Container maxWidth=\"lg\" className={classes.movies}>\r\n        <Movies />\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Projects\\cinema-app\\client\\src\\components\\Footer.jsx",[],"C:\\Projects\\cinema-app\\client\\src\\components\\Header.jsx",[],"C:\\Projects\\cinema-app\\client\\src\\components\\BookingSeats.jsx",[],"C:\\Projects\\cinema-app\\client\\src\\components\\Movie.jsx",["87"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Typography,\r\n  Container,\r\n  Box,\r\n  Button,\r\n  ArrowBackIcon,\r\n  ConfirmationNumberIcon,\r\n} from '.';\r\n\r\nconst Movie = () => {\r\n  const [selectedMovie, setSelectedMovie] = useState('');\r\n  const [genre, setGenre] = useState('');\r\n  const { id } = useParams();\r\n  const getMovie = async () => {\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/movies/${id}`, {\r\n        method: 'GET',\r\n        headers: { token: localStorage.token },\r\n      });\r\n\r\n      const parse = await res.json();\r\n      setSelectedMovie(parse[0]);\r\n      setGenre(parse[0].movie_genre);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMovie();\r\n  }, []);\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    backImg: {\r\n      backgroundImage: `linear-gradient(to right, rgba(0,0,0,.9) 25%, transparent 100%),url(${selectedMovie.image_url})`,\r\n      position: 'absolute',\r\n      filter: 'blur(1.3px)',\r\n      height: '100vh',\r\n      backgroundPosition: 'center',\r\n      backgroundSize: 'cover',\r\n      backgroundRepeat: 'no-repeat',\r\n      width: '100%',\r\n    },\r\n    movieInfo: {\r\n      background: 'transparant',\r\n      transform: 'translate(0%, 0%)',\r\n      padding: theme.spacing(30, 2, 0, 2),\r\n      margin: theme.spacing(0, 50, 0, 0),\r\n    },\r\n    genre: {\r\n      padding: theme.spacing(0.5, 4),\r\n      marginRight: theme.spacing(1.5),\r\n      border: '2px solid ',\r\n      borderColor: '#5f5da9',\r\n      borderRadius: 20,\r\n      [theme.breakpoints.down('sm')]: {\r\n        padding: theme.spacing(0.5, 2),\r\n      },\r\n    },\r\n    description: {\r\n      mixBlendMode: 'difference',\r\n      padding: theme.spacing(0, 50, 0, 0),\r\n    },\r\n    director: {\r\n      color: theme.palette.primary.light,\r\n    },\r\n    btn: {\r\n      border: '2px solid ',\r\n      borderColor: '#5f5da9',\r\n      borderRadius: 20,\r\n      padding: theme.spacing(0.7, 4),\r\n      marginRight: theme.spacing(1.5),\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      movieInfo: { padding: theme.spacing(15, 2, 0, 2) },\r\n      description: { padding: theme.spacing(0, 10, 0, 0) },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.backImg} />\r\n      <Container className={classes.movieInfo} maxWidth=\"lg\">\r\n        <Box mb={3} display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\">\r\n          {genre[0] !== undefined ? (\r\n            genre.map((genree) => (\r\n              <Typography\r\n                variant=\"subtitle1\"\r\n                color=\"inherit\"\r\n                className={classes.genre}\r\n              >\r\n                {genree}\r\n              </Typography>\r\n            ))\r\n          ) : (\r\n            <p>No genres</p>\r\n          )}\r\n        </Box>\r\n\r\n        <Typography gutterBottom variant=\"h1\" color=\"inherit\" align=\"left\">\r\n          {selectedMovie.movie_title}\r\n        </Typography>\r\n\r\n        <Typography\r\n          className={classes.description}\r\n          variant=\"body1\"\r\n          color=\"inherit\"\r\n          align=\"left\"\r\n          paragraph\r\n        >\r\n          {selectedMovie.movie_description}\r\n        </Typography>\r\n        <Typography\r\n          className={classes.director}\r\n          variant=\"h5\"\r\n          align=\"left\"\r\n          gutterBottom\r\n        >\r\n          Режиссёр:\r\n          {` `}\r\n          {selectedMovie.movie_director}\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"inherit\" gutterBottom paragraph>\r\n          {`Длительность: `}\r\n          {selectedMovie.movie_duration}\r\n          {` мин.`}\r\n        </Typography>\r\n        <Button\r\n          className={classes.btn}\r\n          variant=\"outlined\"\r\n          href=\"/dashboard\"\r\n          startIcon={<ArrowBackIcon />}\r\n        >\r\n          Назад\r\n        </Button>\r\n        <Button\r\n          className={classes.btn}\r\n          variant=\"outlined\"\r\n          href={`/booking/${id}`}\r\n          startIcon={<ConfirmationNumberIcon />}\r\n        >\r\n          Купить билеты\r\n        </Button>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","C:\\Projects\\cinema-app\\client\\src\\App.js",["88","89","90","91"],"import React, { useState, useEffect } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport {\r\n  Dashboard,\r\n  SignIn,\r\n  SignUp,\r\n  CssBaseline,\r\n  useMediaQuery,\r\n  Movie,\r\n  BookingPage,\r\n  MyTickets,\r\n} from './components';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\ntoast.configure();\r\n\r\nexport default function App() {\r\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\r\n\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        palette: {\r\n          type: prefersDarkMode ? 'dark' : 'light',\r\n          primary: {\r\n            main: '#5f5da9',\r\n            light: '#7f7dba',\r\n            dark: '#424176',\r\n          },\r\n          secondary: {\r\n            main: '#e0f7fa',\r\n            light: '#e6f8fb',\r\n            dark: '#9cacaf',\r\n          },\r\n          error: {\r\n            main: '#f44336',\r\n            light: '#e57373',\r\n            dark: '#d32f2f',\r\n          },\r\n          warning: {\r\n            main: '#ff9800',\r\n            light: '#ffb74d',\r\n            dark: '#f57c00',\r\n          },\r\n          info: {\r\n            main: '#2196f3',\r\n            light: '#64b5f6',\r\n            dark: '#1976d2',\r\n          },\r\n          success: {\r\n            main: '#4caf50',\r\n            light: '#81c784',\r\n            dark: '#388e3c',\r\n          },\r\n        },\r\n      }),\r\n    [prefersDarkMode]\r\n  );\r\n\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const setAuth = (boolean) => {\r\n    setIsAuthenticated(boolean);\r\n  };\r\n\r\n  async function isAuth() {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/auth/is-verify', {\r\n        method: 'GET',\r\n        headers: { token: localStorage.token },\r\n      });\r\n\r\n      const parseRes = await response.json();\r\n\r\n      if (\r\n        parseRes === true ? setIsAuthenticated(true) : setIsAuthenticated(false)\r\n      );\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    isAuth();\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <BrowserRouter>\r\n        <div className=\"container\" />\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to=\"/dashboard\" />\r\n          </Route>\r\n\r\n          <Route\r\n            exact\r\n            path=\"/login\"\r\n            render={(props) =>\r\n              !isAuthenticated ? (\r\n                <SignIn {...props} setAuth={setAuth} />\r\n              ) : (\r\n                <Redirect to=\"/dashboard\" />\r\n              )\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/register\"\r\n            render={(props) =>\r\n              !isAuthenticated ? (\r\n                <SignUp {...props} setAuth={setAuth} />\r\n              ) : (\r\n                <Redirect to=\"/login\" />\r\n              )\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/dashboard\"\r\n            render={(props) =>\r\n              isAuthenticated ? (\r\n                <Dashboard {...props} setAuth={setAuth} />\r\n              ) : (\r\n                <Redirect to=\"/login\" />\r\n              )\r\n            }\r\n          />\r\n          <Route path=\"/movies/:id\" component={Movie} />\r\n          <Route path=\"/booking/:id\" component={BookingPage} />\r\n          <Route path=\"/dashboard/myTickets\" component={MyTickets} />\r\n          <Route path=\"*\" component={() => 'ERROR 404 NOT FOUND'} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","C:\\Projects\\cinema-app\\client\\src\\utils\\utils.js",[],{"ruleId":"92","severity":1,"message":"93","line":87,"column":7,"nodeType":"94","messageId":"95","endLine":87,"endColumn":20},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"92","severity":1,"message":"93","line":37,"column":7,"nodeType":"94","messageId":"95","endLine":37,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":53,"column":7,"nodeType":"94","messageId":"95","endLine":53,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":68,"column":7,"nodeType":"94","messageId":"95","endLine":68,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":83,"column":7,"nodeType":"94","messageId":"95","endLine":83,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":103,"column":7,"nodeType":"94","messageId":"95","endLine":103,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":142,"column":7,"nodeType":"94","messageId":"95","endLine":142,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":193,"column":7,"nodeType":"94","messageId":"95","endLine":193,"endColumn":20},{"ruleId":"106","severity":1,"message":"107","line":198,"column":16,"nodeType":"108","messageId":"109","endLine":198,"endColumn":25},{"ruleId":"92","severity":1,"message":"93","line":49,"column":7,"nodeType":"94","messageId":"95","endLine":49,"endColumn":18},{"ruleId":"92","severity":1,"message":"93","line":51,"column":7,"nodeType":"94","messageId":"95","endLine":51,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":57,"column":7,"nodeType":"94","messageId":"95","endLine":57,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":74,"column":7,"nodeType":"94","messageId":"95","endLine":74,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":86,"column":7,"nodeType":"94","messageId":"95","endLine":86,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":26,"column":7,"nodeType":"94","messageId":"95","endLine":26,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":36,"column":7,"nodeType":"94","messageId":"95","endLine":36,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":28,"column":7,"nodeType":"94","messageId":"95","endLine":28,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":80,"column":7,"nodeType":"94","messageId":"95","endLine":80,"endColumn":18},{"ruleId":"110","severity":1,"message":"111","line":103,"column":25,"nodeType":"112","endLine":103,"endColumn":35},{"ruleId":"110","severity":1,"message":"111","line":114,"column":25,"nodeType":"112","endLine":114,"endColumn":35},{"ruleId":"110","severity":1,"message":"111","line":125,"column":28,"nodeType":"112","endLine":125,"endColumn":38},"no-console","Unexpected console statement.","MemberExpression","unexpected","lines-around-directive",["113"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed","react/jsx-props-no-spreading","Prop spreading is forbidden","JSXSpreadAttribute","padding-line-between-statements"]